// Prisma schema for FamilyOne (SQLite dev)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  worker
  manager
  admin
}

enum ReportType {
  machine_fault
  material_shortage
  defect
  other
}

enum ReportStatus {
  new_    @map("new")
  ack
  resolved
}

enum RequestKind {
  mold_change
  material_add
  maintenance
  other
}

enum ReviewState {
  pending
  approved
  rejected
}

enum ChecklistCategory {
  safety
  quality
}

enum ShiftCode {
  A
  B
  C
  D
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      Role
  reports   Report[] @relation("ReportCreatedBy")
  requests  Request[] @relation("RequestCreatedBy")
  leaves    LeaveRequest[] @relation("LeaveOfUser")
  annRead   AnnouncementRead[]
}

model Report {
  id         String       @id @default(uuid())
  type       ReportType
  message    String
  createdAt  DateTime     @default(now())
  status     ReportStatus @default(new_)
  createdBy  User         @relation("ReportCreatedBy", fields: [createdById], references: [id])
  createdById String
}

model Request {
  id          String      @id @default(uuid())
  kind        RequestKind
  details     String
  createdAt   DateTime    @default(now())
  state       ReviewState @default(pending)
  createdBy   User        @relation("RequestCreatedBy", fields: [createdById], references: [id])
  createdById String
  reviewerId  String?
  reviewedAt  DateTime?
}

model Announcement {
  id         String   @id @default(uuid())
  title      String
  body       String
  createdAt  DateTime @default(now())
  createdById String
  readBy     AnnouncementRead[]
}

model AnnouncementRead {
  id              String        @id @default(uuid())
  announcement    Announcement  @relation(fields: [announcementId], references: [id])
  announcementId  String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  @@unique([announcementId, userId])
}

model ChecklistTemplateItem {
  id        String            @id @default(uuid())
  category  ChecklistCategory
  title     String
}

model ChecklistSubmission {
  id        String            @id @default(uuid())
  date      DateTime
  userId    String
  category  ChecklistCategory
  itemsJson String
}

model Suggestion {
  id         String   @id @default(uuid())
  text       String
  createdAt  DateTime @default(now())
  anonymous  Boolean  @default(true)
  createdById String?
}

model LeaveRequest {
  id         String      @id @default(uuid())
  user       User        @relation("LeaveOfUser", fields: [userId], references: [id])
  userId     String
  startDate  DateTime
  endDate    DateTime
  reason     String?
  signature  String?
  state      ReviewState @default(pending)
  reviewerId String?
  reviewedAt DateTime?
}

model Shift {
  id     String    @id @default(uuid())
  date   DateTime
  userId String
  shift  ShiftCode
}