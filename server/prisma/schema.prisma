// Prisma schema for FamilyOne (SQLite dev)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  worker
  manager
  admin
}

enum ReportType {
  machine_fault
  material_shortage
  defect
  other
}

enum ReportStatus {
  new_    @map("new")
  ack
  resolved
}

enum ReviewState {
  pending
  approved
  rejected
}

enum ChecklistCategory {
  safety
  quality
}

enum ShiftCode {
  A
  B
  C
  D
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      Role
  reports   Report[] @relation("ReportCreatedBy")
  reportReplies ReportReply[]
  leaves    LeaveRequest[] @relation("LeaveOfUser")
  annRead   AnnouncementRead[]
  trainingCompletions TrainingCompletion[]
}

model Report {
  id         String       @id @default(uuid())
  type       ReportType
  message    String
  createdAt  DateTime     @default(now())
  status     ReportStatus @default(new_)
  createdBy  User         @relation("ReportCreatedBy", fields: [createdById], references: [id])
  createdById String
  replies    ReportReply[]
}

model ReportReply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
}

model Announcement {
  id         String   @id @default(uuid())
  title      String
  body       String
  createdAt  DateTime @default(now())
  createdById String
  readBy     AnnouncementRead[]
  site          String?
  team          String?
  teamDetail    String?
  mustRead      Boolean  @default(false)
  attachmentUrl String?
}

model AnnouncementRead {
  id              String        @id @default(uuid())
  announcement    Announcement  @relation(fields: [announcementId], references: [id])
  announcementId  String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  @@unique([announcementId, userId])
}

model ChecklistTemplateItem {
  id        String            @id @default(uuid())
  category  ChecklistCategory
  title     String
}

model ChecklistSubmission {
  id        String            @id @default(uuid())
  date      DateTime
  userId    String
  category  ChecklistCategory
  itemsJson String
}

model LeaveRequest {
  id         String      @id @default(uuid())
  user       User        @relation("LeaveOfUser", fields: [userId], references: [id])
  userId     String
  startDate  DateTime
  endDate    DateTime
  reason     String?
  signature  String?
  state      ReviewState @default(pending)
  reviewerId String?
  reviewedAt DateTime?
  rejectionReason String?
}

model Shift {
  id     String    @id @default(uuid())
  date   DateTime
  userId String
  shift  ShiftCode
}

model Training {
  id            String   @id @default(uuid())
  title         String
  content       String
  year          Int
  attachmentUrl String?
  completions   TrainingCompletion[]
}

model TrainingCompletion {
  id          String   @id @default(uuid())
  training    Training @relation(fields: [trainingId], references: [id])
  trainingId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  completedAt DateTime @default(now())
  signature   String?
  @@unique([trainingId, userId])
}